[pause_resume]

[display_status]

[virtual_sdcard]
path: /var/lib/moonraker/gcodes ; Path may be different for your install, your web interface will give you and error for the expected path, copy and paste expected path here
on_error_gcode: CANCEL_PRINT

[mcu]
serial:  /dev/serial/by-id/usb-Klipper_stm32f401xc_22004D000850435435373520-if00

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 5000
minimum_cruise_ratio: 0.5
max_z_velocity: 50
max_z_accel: 400
square_corner_velocity: 5.0

[filament_motion_sensor SFS_ENCODER]
detection_length: 10.00 ; This can be adjusted to your desired level of sensitivity. 10 is a recommended value to prevent flow dropoff false triggers.
extruder: extruder
switch_pin: ^PA0
pause_on_runout: False ; This can be set to false to debug false positives putting the sensor in "monitor mode". The printer will not pause but it will run the runout_gcode below.
runout_gcode:
    M118 Filament encoder triggered evaluating clog
    {% if printer["filament_switch_sensor SFS_SWITCH"].filament_detected %}
        M118 Filament switch is triggered. Clog detected! Pause inmediately
        PAUSE
    {% else %}
        M118 Filament switch is not triggered. Filament runout. Allow switch logic to hanle it, will pause after 60 cm.
    {% endif %}


[filament_switch_sensor SFS_SWITCH]
pause_on_runout: False
switch_pin: ^PA15
runout_gcode:
    M118 Runout Detected! Will pause after 60 mm
    PAUSE_AFTER_D D=600


[gcode_macro PAUSE_AFTER_D]
description: Trigger to pause the print after a further 'd' mm has been extruded
variable_end_d: 0 #create variable "END_D" which is associated with the PAUSE_AFTER_D gcode macro
gcode:
  {% set d_start = printer.print_stats.filament_used|float %} #starting point is whatever the filament used is when PAUSE_AFTER_D is called
  {% set d_end = (d_start + params.D|float)|float %} #end point is start + D parameter
  SET_GCODE_VARIABLE MACRO=PAUSE_AFTER_D VARIABLE=end_d VALUE={d_end} #write the end value to the END_D gcode variable to access later
  M117 Pause at {printer["gcode_macro PAUSE_AFTER_D"].end_d|round(2)}
  UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=1 #trigger the delayed gcode below after 1 second

[delayed_gcode PAUSE_AT_D]
initial_duration: 0 #if initial_duration is zero, the delayed gcode won't start by default
gcode:
  {% set d_current = printer.print_stats.filament_used|float %} #get the current filament used
  {% if d_current < printer["gcode_macro PAUSE_AFTER_D"].end_d %} #if we aren't at the stopping point
    M117 Stopping {d_current|round(2)} {printer["gcode_macro PAUSE_AFTER_D"].end_d|round(2)}
    UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=1 #restart the timer on the delayed gcode
  {% else %}
    PAUSE
    UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=0 #set the delayed gcode duration back to zero so it doesn't keep triggering
  {% endif %}


[delayed_gcode ENABLEFILAMENTSENSOR] ; This will disable the SFS 1 second after klipper starts
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=SFS_ENCODER ENABLE=1 ; Put your filament sensor's name after SENSOR=
    SET_FILAMENT_SENSOR SENSOR=SFS_SWITCH ENABLE=1 ; Put your filament sensor's name after SENSOR=

[gcode_macro SFS_ENABLE] ; Add this to PRINT_START
description: Enable smart filament sensor
gcode:
    M118 ENABLING the Smart Filament Sensor
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=SFS_ENCODER ENABLE=1 ; Put your filament sensor's name after SENSOR=
    SET_FILAMENT_SENSOR SENSOR=SFS_SWITCH ENABLE=1 ; Put your filament sensor's name after SENSOR=

[gcode_macro SFS_DISABLE] ; Add this to PRINT_END and PRINT_CANCEL
description: Disable smart filament sensor
gcode:
    M118 DISABLING the Smart Filament Sensor
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=SFS_ENCODER ENABLE=0 ; Put your filament sensor's name after SENSOR=
    SET_FILAMENT_SENSOR SENSOR=SFS_SWITCH ENABLE=0 ; Put your filament sensor's name after SENSOR=


#############################
# MOTION AXES
#############################

[stepper_x]
step_pin: !PB14
dir_pin: PB13
enable_pin: !PB15
microsteps: 16
rotation_distance: 39.94
endstop_pin: !PA2
position_endstop: 0
position_max: 300
homing_speed: 100
second_homing_speed: 125

[stepper_y]
step_pin: PB10
dir_pin: PB2
enable_pin: !PB12
microsteps: 16
rotation_distance: 39.94
endstop_pin: !PA1
position_endstop: 0
position_max: 300
homing_speed: 125
second_homing_speed: 10

[stepper_z]
step_pin: PB0
dir_pin: !PC5
enable_pin: !PB1
microsteps: 16
rotation_distance: 7.96
endstop_pin: probe:z_virtual_endstop
position_max: 400
position_min: -5
homing_speed: 25
second_homing_speed: 10

[heater_bed]
heater_pin: PA8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC1
min_temp: 0
max_temp: 130

[fan]
pin: PC8
off_below: 0.1

[heater_fan extruder]
pin: PC7
off_below: 0.2

[controller_fan case]
pin: PC6
off_below: 0.3
idle_speed: 0.0

[temperature_sensor mainboard]
sensor_type: temperature_mcu
min_temp: 10
max_temp: 60

#############################
# LEVELING
#############################

[safe_z_home]
home_xy_position: 122.75,162.8
z_hop: 10
speed: 125

[gcode_macro PROBE_DOWN]
gcode:
    SET_PIN PIN=probe_enable VALUE=1

[gcode_macro PROBE_UP]
gcode:
    SET_PIN PIN=probe_enable VALUE=0

[output_pin probe_enable]
pin: PC3  # Set to the control pin on your board
value: 0

[probe]
pin: ^!PC2
deactivate_on_each_sample: False
#adjust offsets to fit your configuration
x_offset: 33.5
y_offset: -12
samples: 1
samples_tolerance: 0.05
samples_tolerance_retries: 3
activate_gcode:
    PROBE_DOWN
    G4 P500
deactivate_gcode:
    PROBE_UP

[bed_mesh]
speed: 150
horizontal_move_z: 10
mesh_min: 36.5, 15
mesh_max: 300, 285
probe_count: 5
fade_start: 1
fade_end: 10
fade_target: 0
mesh_pps: 2
algorithm: bicubic

[bed_screws]
screw1: 50,50
screw1_name: front left
screw2: 250,50
screw2_name: front right
screw3: 250,250
screw3_name: back right
screw4: 50,250
screw4_name: back left
speed: 125

[screws_tilt_adjust]
screw1: 22.75,62.8
screw1_name: front left
screw2: 222.75,62.8
screw2_name: front right
screw3: 222.75,262.8
screw3_name: back right
screw4: 22.75,262.8
screw4_name: back left
speed: 125
screw_thread: CW-M5


[force_move]
enable_force_move: True

#############################
# LEDS
#############################

[neopixel extruder]
pin: PB7
initial_RED: 1.0
initial_GREEN: 0
initial_BLUE: 0

[delayed_gcode Welcome_0]
initial_duration: 0
gcode:
  SET_LED LED=extruder RED=1 GREEN=0 BLUE=0

[delayed_gcode Welcome_1]
initial_duration: 0.5
gcode:
  SET_LED LED=extruder RED=0 GREEN=1 BLUE=0

[delayed_gcode Welcome_2]
initial_duration: 1
gcode:
  SET_LED LED=extruder RED=0 GREEN=0 BLUE=1

[delayed_gcode Welcome_3]
initial_duration: 1.5
gcode:
  SET_LED LED=extruder RED=1 GREEN=1 BLUE=1

[delayed_gcode Welcome_4]
initial_duration: 8
gcode:
  SET_LED LED=extruder RED=0.0 GREEN=0.0 BLUE=0 # turn off led


## Extruder
[extruder]
step_pin: PA7
dir_pin: PA6
enable_pin: !PC4
microsteps: 16
rotation_distance: 23.265833333333333
gear_ratio: 66:22
filament_diameter: 1.750
max_extrude_only_distance: 1000
max_extrude_cross_section: 5

[extruder]
heater_pin: PC9
#sensor_type: Generic 3950 ; Common sensor for all metal solution, always reffer to your sensors documentation and the Klipper config refference to ensure correct deffinition
sensor_type: EPCOS 100K B57560G104F ; Stock sensor
sensor_pin: PC0
control: pid

[idle_timeout]
gcode:
  M118 Idling
  {% if printer.pause_resume.is_paused %}
    M118 Idle timeout while paused, turning off hotend
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
  {% else %}
    M118 Idle timeout
    TURN_OFF_HEATERS
    M84
  {% endif %}

timeout: 600
